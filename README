Trafan (Traffic Analyzer) was created to give an admit a cursory glance into top
talkers on a network. I originally wrote this to track down some bandwidth hogs, 
but it has become very useful for other things. 


Example usage:

[root@sniffer mthomas]# ~mthomas/trafan -i bond0 -r 5 -l 10 
-- START 1268321553
   1. 208.85.44.15:80       11.181.178.93:1763    tp=2729       tB=2258085    Bps=451617     Mbps=3 
   2. 149.174.249.169:80    10.212.44.138:1123    tp=1184       tB=1193362    Bps=238672     Mbps=1 
   3. 77.67.109.202:51727   11.181.90.66:2346     tp=1167       tB=1175722    Bps=235144     Mbps=1 
   4. 10.212.52.178:1324    209.222.128.159:80    tp=1169       tB=1157528    Bps=231505     Mbps=1 
   5. 10.123.3.10:50065     173.194.8.150:80      tp=1265       tB=1147123    Bps=229424     Mbps=1 
   6. 10.66.178.53:49182    64.236.128.78:443     tp=1181       tB=1079384    Bps=215876     Mbps=1 
   7. 68.33.5.164:5001      11.181.149.75:1631    tp=1010       tB=1031872    Bps=206374     Mbps=1 
   8. 149.174.249.12:1935   10.123.3.153:55321    tp=985        tB=937232     Bps=468616     Mbps=3 
   9. 11.181.173.214:42744  199.253.140.81:80     tp=844        tB=859374     Bps=214843     Mbps=1 
  10. 199.80.53.100:80      10.212.31.42:2778     tp=802        tB=796664     Bps=159332     Mbps=1 
-- END   1268321558

-i bond0:  The interface to listen on.
-r 5:      5 is the amount of time (in seconds) to analyze traffic 
           before display.
-l 10:     Limit the output to only the top 10 talkers. This is ordered 
           by total bytes transferred. 

Column 01: The Nth of the top X talkers.
Column 02: The source address and source port of a flow.
Column 03: The destination address and destination port of a flow.
Column 04: Total packets seen within the given timeline.
Column 05: Total bytes seen xferred within the given timeline.
Column 06: Bytes per second.
Column 07: Mega bits per second.

[root@sniffer mthomas]# ~mthomas/trafan -i bond0 -r 1 -l 1 -q
   1. 149.174.245.174:80    10.123.178.99:1713    tp=10918      tB=11079038   Bps=11079038   Mbps=84 
   1. 10.123.178.99:1713    149.174.245.174:80    tp=9926       tB=10074462   Bps=10074462   Mbps=76 
   1. 10.123.178.99:1713    149.174.245.174:80    tp=10711      tB=10876492   Bps=10876492   Mbps=82 
   1. 10.123.178.99:1713    149.174.245.174:80    tp=10662      tB=10831628   Bps=10831628   Mbps=82 
   1. 155.201.18.20:11160   10.123.177.185:1713   tp=1117       tB=617624     Bps=617624     Mbps=4 
   1. 155.201.18.20:11160   10.123.177.185:1713   tp=1102       tB=619961     Bps=619961     Mbps=4 
   1. 149.174.249.184:80    10.123.170.58:3461    tp=2358       tB=2561572    Bps=2561572    Mbps=19

-i bond0: The interface we are listening on.
-r 1:     The amount of time in seconds to analyze traffic.
-l 1:     Limit the output to only one top talker.
-q:       quiet output, (no START/END).

This essentially gives us a realtime Mbps stat on ONLY the highest top talker.

[root@sniffer mthomas]# ~mthomas/trafan -i bond0 -r 5 -l 3 -d
-- START 1268322243
   1. 10.181.186.55:3614    208.85.44.13:80       tp=3859       tB=3895982    Bps=973995     Mbps=7 
       Bps: 3895982  Mbps: 29
       Bps: 0        Mbps: 0
       Bps: 0        Mbps: 0
       Bps: 0        Mbps: 0
   2. 64.50.236.52:80       10.172.3.54:4215      tp=3281       tB=2861532    Bps=572306     Mbps=4 
       Bps: 581440   Mbps: 4
       Bps: 565286   Mbps: 4
       Bps: 569074   Mbps: 4
       Bps: 578372   Mbps: 4
   3. 10.180.177.196:1874   208.111.160.6:80      tp=1691       tB=1698259    Bps=339651     Mbps=2 
       Bps: 935038   Mbps: 7
       Bps: 90583    Mbps: 0
       Bps: 672638   Mbps: 5
       Bps: 0        Mbps: 0
-- END   1268322248


-i bond0: blah blah
-r 5:     sample for 5 seconds.
-l 3:     limit to top 3 talkers.
-d:       we want to see second-by-second statistics on this flow within the sample time.

-d is a good flag to use to determine if a top talker for one sample was just burst traffic
   this will display a second-by-second runddown on the bytes xferred within that sampling
   session.

I highly suggest utilizing libpcap-1.0 since the direct kernel mmap is the bomb!
